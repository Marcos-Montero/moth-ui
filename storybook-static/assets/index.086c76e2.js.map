{"version":3,"mappings":"2LAeO,YAAgB,aACX,gBACH,kBACPA,cACAC,CAEW,IACXC,YACE,cACO,mBACM,OACJ,iBAAEF,EAAgB,KACrBG,mBAEJ,uBAAgB,UAAY,EAAU,GAdrC,kzBCZA,eAAgBC,CAAiD,IACtEF,SACE,kBAAe,oBACb,gBAAY,IAAeE,EAAI,GAH9B,0SCDP,MAAMC,EAASC,EAAMC,KAAK,UAAM,OAAO,iCAA2B,sGACrDC,EAAOC,MAAM,CACxB,KAAM,CAACC,EAASC,CAAU,EAAIC,mBAAS,EAAI,EAC3C,SACGC,mBAAQ,CAAC,WAAU,4BAAoB,YACrCH,GACCR,SACE,MAAO,CACLY,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,MAAO,OACPC,OAAQ,MACV,EAAE,WAEF,MAAI,MAAO,CAAEC,MAAO,QAASC,WAAY,WAAY,EAAE,oCAI1D,EACDlB,EAACG,EAAM,CACL,OAAQ,IAAM,CACZM,EAAW,EAAK,CAClB,EACA,MAAM,+DACN,GACO,CAEf,EA3BoB","names":["backgroundColor","children","_jsx","props","args","Spline","React","lazy","Home","__name","loading","setLoading","useState","Suspense","display","alignItems","justifyContent","width","height","color","fontFamily"],"sources":["../../src/components/Button/index.tsx","../../src/components/Switch/index.tsx","../../src/components/Home/index.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport \"./button.css\";\n\ninterface ButtonProps {\n  primary?: boolean;\n\n  backgroundColor?: string;\n\n  size?: \"small\" | \"medium\" | \"large\";\n\n  children?: ReactNode;\n\n  onClick?: () => void;\n}\n\nexport const Button = ({\n  primary = false,\n  size = \"medium\",\n  backgroundColor,\n  children,\n  ...props\n}: ButtonProps) => {\n  return (\n    <button\n      type=\"button\"\n      className={\"button\"}\n      style={{ backgroundColor }}\n      {...props}\n    >\n      <span className=\"buttonSpan\">{children}</span>\n    </button>\n  );\n};\n","import React, { InputHTMLAttributes } from \"react\";\r\nimport \"./switch.css\";\r\n\r\nexport const Switch = ({ ...args }: InputHTMLAttributes<HTMLInputElement>) => {\r\n  return (\r\n    <div className=\"slide\">\r\n      <input type=\"checkbox\" {...args}></input>\r\n    </div>\r\n  );\r\n};\r\n","import React, { Suspense, useState } from \"react\";\r\n\r\nconst Spline = React.lazy(() => import(\"@splinetool/react-spline\"));\r\nexport const Home = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  return (\r\n    <Suspense fallback={<h1>loading...</h1>}>\r\n      {loading && (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            width: \"100%\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <h1 style={{ color: \"white\", fontFamily: \"Helvetica\" }}>\r\n            Loading our 3D Home...\r\n          </h1>\r\n        </div>\r\n      )}\r\n      <Spline\r\n        onLoad={() => {\r\n          setLoading(false);\r\n        }}\r\n        scene=\"https://prod.spline.design/mETR6JtWcksI8BRx/scene.splinecode\"\r\n      />\r\n    </Suspense>\r\n  );\r\n};\r\n"],"file":"assets/index.086c76e2.js"}